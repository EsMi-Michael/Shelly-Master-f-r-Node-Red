[
    {
        "id": "f443366f1b6d2e23",
        "type": "mqtt in",
        "z": "1a7f794a0d4294ac",
        "name": "",
        "topic": "#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "dc4ec0707ae241ad",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a02090c17bc955c6",
                "9d50aa9109ebd470"
            ]
        ]
    },
    {
        "id": "a02090c17bc955c6",
        "type": "function",
        "z": "1a7f794a0d4294ac",
        "name": "Shelly Master Funktion V3",
        "func": "/// Shelly Master Script für Node-Red zu Influx V2\n// EsMi 21.01.2025\n\n// Sicherstellen, dass msg.topic definiert ist\nconst topic = msg.topic || \"\"; \nif (!topic.includes(\"status\")) {\n    return null; // Beende, wenn \"status\" nicht im Thema ist\n}\n\n// Sicherstellen, dass msg.payload ein gültiges Objekt ist\nif (!msg.payload || typeof msg.payload !== \"object\" || Array.isArray(msg.payload)) {\n    return null; // Abbrechen, wenn payload ungültig ist\n}\n\n// Extrahiere Geräteinformationen\nconst deviceName = topic.split(\"/\")[0] || \"unknown_device\";\nconst deviceData = msg.payload;\n\n// Status als Boolean bestimmen\nconst status = Boolean(deviceData.output);\n\n// Summiere aktive Leistungswerte (a, b, c) nur wenn c_act_power definiert ist\nlet sumActPowerEsmi = null;\nlet sumActPowerEsmiPos = null;\nlet sumActPowerEsmiNeg = null;\nif (deviceData.c_act_power !== undefined) {\n    const powerKeys = [\"a_act_power\", \"b_act_power\", \"c_act_power\"];\n    sumActPowerEsmi = powerKeys.reduce((sum, key) => {\n        const value = parseFloat(deviceData[key]);\n        return sum + (isNaN(value) ? 0 : value); // Nur gültige Werte summieren\n    }, 0);\n}\nif (sumActPowerEsmi > 0 ) {\n    sumActPowerEsmiPos = sumActPowerEsmi;\n    sumActPowerEsmiNeg = 0;\n} else if (sumActPowerEsmi < 0) {\n    sumActPowerEsmiPos = 0;\n    sumActPowerEsmiNeg = sumActPowerEsmi;\n} else {\n    sumActPowerEsmiPos = null;\n    sumActPowerEsmiNeg = null;\n}\n\n// Funktion zum Flachmachen von verschachtelten Objekten\nfunction flattenObject(obj, prefix = \"\") {\n    return Object.entries(obj).reduce((acc, [key, value]) => {\n        const newKey = prefix ? `${prefix}_${key}` : key;\n        if (value && typeof value === \"object\" && !Array.isArray(value)) {\n            Object.assign(acc, flattenObject(value, newKey)); // Rekursiv flachmachen\n        } else {\n            acc[newKey] = value;\n        }\n        return acc;\n    }, {});\n}\n\n// Felder flach machen\nconst flattenedFields = flattenObject(deviceData);\n\n// Bereite das InfluxDB Batch-Array vor\nconst influxBatch = [\n    {\n        measurement: deviceName,\n        tags: {\n            id: deviceData.id || 0,\n            source: deviceData.source || \"unknown\",\n            device: deviceName // Gerätname als Tag hinzufügen\n        },\n        fields: {\n            ...flattenedFields, // Flache Felder hinzufügen\n            ...(sumActPowerEsmi !== null && { sum_act_power_esmi: sumActPowerEsmi }), // Summierte Leistung hinzufügen\n            ...(sumActPowerEsmiPos !== null && { sum_act_power_esmi_Pos: sumActPowerEsmiPos }),\n            ...(sumActPowerEsmiNeg !== null && { sum_act_power_esmi_Neg: sumActPowerEsmiNeg }),\n            status: status // Status als Boolean hinzufügen\n        }\n    }\n];\n\n// Ersetze msg.payload durch das InfluxDB Batch\nmsg.payload = influxBatch;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "a7fdb17b966d1611",
                "921bbcaeeb0d2ca0"
            ]
        ]
    },
    {
        "id": "9d1bde20b37ec403",
        "type": "debug",
        "z": "1a7f794a0d4294ac",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 100,
        "wires": []
    },
    {
        "id": "921bbcaeeb0d2ca0",
        "type": "function",
        "z": "1a7f794a0d4294ac",
        "name": "apower ggf umkehren",
        "func": "// Array mit Measurements, bei denen apower umgekehrt werden soll\nconst targetMeasurements = [\"BK-Tiny-Kati\", \"Ein weiteres Measurement\", \"Plug-2\"]; \n\n// Sicherstellen, dass msg.payload ein Array ist\nif (!Array.isArray(msg.payload)) {\n    return null; // Abbrechen, wenn payload kein Array ist\n}\n\n// Daten verarbeiten\nmsg.payload = msg.payload.map(item => {\n    // Überprüfen, ob das Measurement im Array ist\n    if (targetMeasurements.includes(item.measurement)) {\n        // apower umkehren, falls vorhanden\n        if (item.fields.apower !== undefined) {\n            item.fields.apower = -item.fields.apower;\n        }\n    }\n    return item; // Bearbeitetes oder unverändertes Item zurückgeben\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "9d1bde20b37ec403",
                "991857d7d11439b7"
            ]
        ]
    },
    {
        "id": "a7fdb17b966d1611",
        "type": "debug",
        "z": "1a7f794a0d4294ac",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 160,
        "wires": []
    },
    {
        "id": "9d50aa9109ebd470",
        "type": "debug",
        "z": "1a7f794a0d4294ac",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "991857d7d11439b7",
        "type": "influxdb batch",
        "z": "1a7f794a0d4294ac",
        "influxdb": "dfeb17a634674929",
        "precision": "",
        "retentionPolicy": "",
        "name": "Influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "esmi.tech",
        "bucket": "5years",
        "x": 930,
        "y": 140,
        "wires": []
    },
    {
        "id": "1f68cbb76cb9cff4",
        "type": "comment",
        "z": "1a7f794a0d4294ac",
        "name": "Shelly Master",
        "info": "",
        "x": 450,
        "y": 40,
        "wires": []
    },
    {
        "id": "dc4ec0707ae241ad",
        "type": "mqtt-broker",
        "name": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dfeb17a634674929",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://127.0.0.1:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    }
]
